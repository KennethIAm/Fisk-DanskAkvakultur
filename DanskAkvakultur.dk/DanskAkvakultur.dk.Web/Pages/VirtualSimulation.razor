@page "/virtual-simulation"
@layout GameLayout
@implements IAsyncDisposable

<head>
    <link rel="stylesheet" href="/libs/engine/1.0.0/TemplateData/style.css" />
</head>

<ShowAlertMessage Message="@(gameEngineMessage)" Alert="@(MessageAlert.Info)" />

<div id="unity-container" class="unity-desktop">
    @if (!string.IsNullOrEmpty(exceptionMessage))
    {
        <div class="d-grid gap-1 col-6 mx-auto">
            <ShowAlertMessage Message="@(exceptionMessage)" Alert="@(MessageAlert.Warning)" />
            <button @onclick="async () => await LoadGameEngineAsync()" class="btn btn-sm btn-warning text-uppercase">
                Klik for at genindlæse simulation!
            </button>
        </div>
    }

    @if (module is not null)
    {
        <canvas id="unity-canvas" style="@(canvasCssStyle)"></canvas>
        <div id="unity-loading-bar">
            <div id="unity-logo"></div>
            <div id="unity-progress-bar-empty">
                <div id="unity-progress-bar-full"></div>
            </div>
        </div>
        <div id="unity-mobile-warning">
            WebGL builds er ikke supporteret for mobile enheder.
            <div class="alert alert-warning" role="alert">
            </div>
        </div>
        <div id="unity-footer">
            <div id="unity-webgl-logo"></div>
            <div id="unity-fullscreen-button"></div>
            <div id="unity-build-title">FiskErFremtidenGameDemo</div>
        </div>
    }
    <div class="footer-simulation">
        <div>
            <div class="shadow rounded">
                <button class="btn btn-primary btn-lg text-uppercase" style="width:250px;" disabled="@(!SimulationService.IsConnected || information is null)" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasWithBackdrop" aria-controls="offcanvasWithBackdrop">
                    læs information
                </button>
            </div>
            <br />
            <div class="shadow rounded">

                <button class="btn btn-primary btn-lg text-uppercase" style="width:250px;" disabled="@(!SimulationService.IsConnected || (tempData is null || !tempData.Any()))" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasHighscore" aria-controls="offcanvasWithBackdrop">
                    vis resultattavle
                </button>
            </div>
        </div>
    </div>
</div>

@*Offcanvas*@
<div class="offcanvas offcanvas-start" tabindex="-1" id="offcanvasWithBackdrop" aria-labelledby="offcanvasWithBackdropLabel">
    @if (information is not null)
    {
        <div class="offcanvas-header">
            <h5 class="offcanvas-title" id="offcanvasWithBackdropLabel">@(information.Animal.Name)</h5>
            <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            <p>
                @(information.BriefDescription)
            </p>
            <p>
                @(information.HabitatDescription)
            </p>
        </div>
    }
</div>

@*Offcanvas*@
<div class="offcanvas offcanvas-start" tabindex="-1" id="offcanvasHighscore" aria-labelledby="offcanvasWithBackdropLabel">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="offcanvasWithBackdropLabel">Bedste Resultater</h5>
        <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        @if (tempData is not null)
        {
            <style>
                tr:nth-child(1) .fa-star {
                    color: #D6AF36 !important;
                }

                tr:nth-child(2) .fa-star {
                    color: #D7D7D7 !important;
                }

                tr:nth-child(3) .fa-star {
                    color: #824A02 !important;
                }
            </style>

            <table class="table table-sm table-borderless table-responsive caption-top">
                <caption>
                    <p></p>Senest opdateret:
                    <p class="fs-6">@lastUpdated.ToString("f", CultureInfo.CreateSpecificCulture("da-DK"))</p>
                </caption>
                <thead>
                    <tr>
                        <th scope="col">Score</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var data in tempData.OrderByDescending(x => x.Score).Take(25))
                    {
                        <tr>
                            <td>@data.Score</td>
                            @switch (tempData.IndexOf(data))
                            {
                                case 0:
                                    <th><i class="fas fa-star"></i></th>
                                    break;
                                case 1:
                                    <th><i class="fas fa-star"></i></th>
                                    break;
                                case 2:
                                    <th><i class="fas fa-star"></i></th>
                                    break;
                                default:
                                    <th><i class="fas fa-star"></i></th>
                                    break;
                            }
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>Inlæser resultater...</p>
        }
    </div>
</div>

@code {
    [Inject] protected ILogger<VirtualSimulation> Logger { get; set; }
    [Inject] protected IJSRuntime JS { get; set; }
    [Inject] protected ISimulationService SimulationService { get; set; }
    [Inject] protected ISimulationHubSettings SimulationSettings { get; set; }

    private List<IScore> tempData;
    private DateTime lastUpdated;
    private AnimalInformation information;
    private IJSObjectReference module;
    private DotNetObjectReference<VirtualSimulation> objRef;
    private string canvasCssStyle;
    private string gameEngineMessage;
    private string exceptionMessage;

    private bool moduleDisposed { get; set; }

    protected override async Task OnInitializedAsync()
    {
        SimulationService.LeaderboardUpdated += OnLeaderboardUpdated;
        SimulationService.AnimalChoosen += OnPlayerChoosenAnimal;

        try
        {
            var connectTask = SimulationService.ConnectAsync();
            await Task.WhenAll(connectTask);
        }
        catch (Exception ex)
        {
            Logger.LogWarning($"Error occurred while initializing the component.");

            Logger.LogError(ex, ex.Message);
        }

        gameEngineMessage = await LoadGameEngineAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                objRef = DotNetObjectReference.Create(this);
                await JS.InvokeVoidAsync("setDotNetReference", objRef);

                module = await JS.InvokeAsync<IJSObjectReference>("import", SimulationSettings.GameEnginePath);

                canvasCssStyle = "width:100vh; height:auto; aspect-ratio: 16 / 9; cursor:default;";
            }
            catch (Exception)
            {
                exceptionMessage = "Fejlede indlæsning af Core Engine.";
            }
            finally
            {
                StateHasChanged();
            }
        }
    }

    public void OnLeaderboardUpdated(object sender, LeaderboardUpdatedEventArgs e)
    {
        try
        {
            Logger.LogInformation($"Received data from {sender}, last updated: {e.DataSetUpdated}");

            tempData = e?.ScoreData;
            lastUpdated = e.DataSetUpdated;
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void OnPlayerChoosenAnimal(object sender, PlayerAnimalChoiceEventArgs e)
    {
        try
        {
            Logger.LogInformation($"Received animal data from {sender}.");

            information = e?.Information;
        }
        finally
        {
            StateHasChanged();
        }
    }

    public async Task<string> LoadGameEngineAsync()
    {
        exceptionMessage = string.Empty;

        try
        {
            //if (moduleDisposed || module is null) return string.Empty;

            return await module.InvokeAsync<string>("loadUnityEngine") ?? string.Empty;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, ex.Message);

            exceptionMessage = "Fejlede indlæsning af Virtuel Simulation.";

            return string.Empty;
        }
    }

    [JSInvokable("SetPlayerScoreData")]
    public async Task<bool> SendScoreAsync(float data)
    {
        if (data is 0) return false;

        Logger.LogInformation($"Received Leaderboad information : {data}");

        return await SimulationService.UpdateLeaderboardAsync((decimal)data);
    }

    [JSInvokable("SetPlayerAnimalChoiceData")]
    public async Task<bool> SendAnimalChoiceAsync(string name)
    {
        if (string.IsNullOrEmpty(name)) return false;

        Logger.LogInformation($"Received Animal Choice : {name}");

        return await SimulationService.UpdateAnimalInformationAsync(name);
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            try
            {
                moduleDisposed = true;

                await module.DisposeAsync();
                await SimulationService.DisposeAsync();

                Logger.LogInformation($"Diposed {nameof(module)} from {typeof(IJSObjectReference)}");
            }
            catch (Exception)
            {
                // Ignore, error during dispose of module.
            }
        }
    }
}
